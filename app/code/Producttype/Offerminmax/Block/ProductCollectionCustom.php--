<?php

namespace Producttype\Offerminmax\Block;

use \Magento\Catalog\Api\CategoryRepositoryInterface;
use \Magento\Catalog\Block\Product\ProductList\Toolbar;
use \Magento\Catalog\Model\Category;
use \Magento\Catalog\Model\Config;
use \Magento\Catalog\Model\Layer;
use \Magento\Catalog\Model\Layer\Resolver;
use \Magento\Catalog\Model\Product;
use \Magento\Catalog\Model\ResourceModel\Product\Collection;
use \Magento\Catalog\Pricing\Price\FinalPrice;
use \Magento\Eav\Model\Entity\Collection\AbstractCollection;
use \Magento\Framework\App\ActionInterface;
use \Magento\Framework\App\Config\Element;
use \Magento\Framework\Data\Helper\PostHelper;
use \Magento\Framework\DataObject\IdentityInterface;
use \Magento\Framework\Exception\NoSuchEntityException;
use \Magento\Framework\Pricing\Render;
use \Magento\Framework\Url\Helper\Data;
use \Magento\Framework\App\ObjectManager;
use \Magento\Catalog\Helper\Output as OutputHelper;
use \Magento\Catalog\Block\Product\ListProduct;

class ProductCollectionCustom extends ListProduct
{
    
    protected $collectionFactory;
    protected $options;
    protected $attributeManagement;
    protected $_defaultToolbarBlock = Toolbar::class;
    protected $_productCollection;
    protected $_catalogLayer;
    protected $_postDataHelper;
    protected $urlHelper;
    protected $categoryRepository;

    public function __construct(
        \Magento\Catalog\Model\ResourceModel\Product\CollectionFactory $collectionFactory,
        \Magento\Catalog\Model\Product\AttributeSet\Options $options,
        \Magento\Eav\Api\AttributeManagementInterface $attributeManagement,
        Resolver $layerResolver,
        PostHelper $postDataHelper,
        CategoryRepositoryInterface $categoryRepository,
        Data $urlHelper,
        Context $context,
        array $data = [],
        ?OutputHelper $outputHelper = null
    ) {
        $this->collectionFactory = $collectionFactory;
        $this->options = $options;
        $this->attributeManagement = $attributeManagement;
        $this->_catalogLayer = $layerResolver->get();
        $this->_postDataHelper = $postDataHelper;
        $this->categoryRepository = $categoryRepository;
        $this->urlHelper = $urlHelper;
        $data['outputHelper'] = $outputHelper ?? ObjectManager::getInstance()->get(OutputHelper::class);
        parent::__construct(
            
            $layerResolver,
            $postDataHelper,
            $categoryRepository,
            $urlHelper,
            $context,
            $data
        );
    }
    

    public function getProductCollectionCustom() {
        $attributeSetArray = $this->options->toOptionArray();
        /*$attrSetIds = [];
        foreach ($attributeSetArray as $key => $value) {
            $attributes = $this->attributeManagement->getAttributes(\Magento\Catalog\Model\Product::ENTITY, $value['value']); // Get all attribute using attribute set id.
            foreach ($attributes as $attribute) {
                if ($attribute->getAttributeId() == 93) { // 93 is your attribute id which you want to check that exist in attribute set.
                    $attrSetIds[] = $value['value'];
                }
            }
        }*/
        $collection = $this->collectionFactory->create();
        $collection->addFieldToSelect('*');
        $collection->addFieldToFilter('is_new', ['in' => 'yes']); // Return collection based on attribute set ids. It means your attribute exist in product.
        return $collection;
    }
}